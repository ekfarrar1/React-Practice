{"ast":null,"code":"var _jsxFileName = \"/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobFeed() {\n  _s();\n  const [jobPosts, setJobPosts] = useState([]);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [endReached, setEndReached] = useState(false);\n\n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n  //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    FetchIds();\n  }, [pageNumber]);\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n  //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async () => {\n    try {\n      if (!endReached) {\n        const response = await axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`);\n        const jsonData = await response.data;\n        setJobIds(jsonData.splice(pageNumber * 5, 5));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    // grab 5 job IDs based on page number\n    //.splice overwrites original array\n    //so, response.data returns all job IDs every time and splice takes the next 5 needed until reach the end\n    //jobIds.splice(pageNumber*5, 5);\n    console.log(jobIds);\n\n    //NOTE: I'm confused by this\n    if (jobPosts.length >= jobIds.length) {\n      setEndReached(true);\n    }\n    fetchMetadata(jobIds);\n  };\n  const fetchMetadata = jobPostIds => {\n    jobPostIds.forEach(jobPostId => {\n      axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n      // if successful, set job IDs as response data\n      .then(response => {\n        console.log(response);\n        setJobPosts(jobPosts => [...jobPosts, response.data]);\n      })\n      // if fails, print error to dev console\n      .catch(error => {\n        console.log('Error fetching metdata', error);\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.header,\n      children: \"Hackernews Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allPostsContainer,\n      children: jobPosts.map((onePost, idx) => /*#__PURE__*/_jsxDEV(Post, {\n        post: onePost\n      }, onePost === null || onePost === void 0 ? void 0 : onePost.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), !endReached && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(pageNumber + 1),\n        className: styles.button,\n        children: \"Load More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(JobFeed, \"BMHhIT8zFQqnBIiu4ppOz0sLHDk=\");\n_c = JobFeed;\n;\nexport default JobFeed;\n\n// Job Post Object\nconst Post = ({\n  post\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: post === null || post === void 0 ? void 0 : post.url,\n    target: \"__blank\",\n    style: {\n      textDecoration: 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post === null || post === void 0 ? void 0 : post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: moment(post === null || post === void 0 ? void 0 : post.time).format('Do MMM YYYY hh:mm a')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted by: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.by\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 22\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n_c2 = Post;\nvar _c, _c2;\n$RefreshReg$(_c, \"JobFeed\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","styles","axios","moment","jsxDEV","_jsxDEV","JobFeed","_s","jobPosts","setJobPosts","jobIds","setJobIds","pageNumber","setPageNumber","endReached","setEndReached","FetchIds","response","get","jsonData","data","splice","error","console","log","length","fetchMetadata","jobPostIds","forEach","jobPostId","then","catch","className","container","children","header","fileName","_jsxFileName","lineNumber","columnNumber","allPostsContainer","map","onePost","idx","Post","post","id","style","display","justifyContent","onClick","button","_c","href","url","target","textDecoration","postContainer","title","time","format","by","_c2","$RefreshReg$"],"sources":["/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\n\n\nfunction JobFeed() {\n  const [jobPosts, setJobPosts] = useState([]);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [endReached, setEndReached] = useState(false);\n\n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n    //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    FetchIds()}, [pageNumber]);\n  \n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n   //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async() => {\n    try {\n      if (!endReached){\n        const response = await axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n        const jsonData = await response.data\n        setJobIds(jsonData.splice(pageNumber*5, 5))\n      } \n    } catch (error) {\n      console.log(error)\n    }\n      // grab 5 job IDs based on page number\n      //.splice overwrites original array\n      //so, response.data returns all job IDs every time and splice takes the next 5 needed until reach the end\n      //jobIds.splice(pageNumber*5, 5);\n      console.log(jobIds)\n      \n      //NOTE: I'm confused by this\n      if (jobPosts.length >= jobIds.length){\n        setEndReached(true)\n      }\n      fetchMetadata(jobIds)\n  }\n\n    const fetchMetadata = (jobPostIds) => {\n      jobPostIds.forEach((jobPostId) => {\n        axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n        // if successful, set job IDs as response data\n        .then(response =>{\n          console.log(response)\n          setJobPosts((jobPosts) => [...jobPosts, response.data])\n        })\n        // if fails, print error to dev console\n        .catch(error => {\n          console.log('Error fetching metdata', error)\n        })\n      })\n    }\n  \n  \n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.header}>Hackernews Jobs</h1>\n        <div className={styles.allPostsContainer}> \n        {\n          jobPosts.map((onePost, idx) => (<Post key={ onePost?.id } post={ onePost } />\n        ))}\n        </div>\n        {!endReached && (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button\n            onClick={() => setPageNumber(pageNumber + 1)}\n            className={styles.button}\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JobFeed;\n\n\n// Job Post Object\nconst Post = ({ post }) => {\n  return (\n    <a href={post?.url} target=\"__blank\" style={{ textDecoration: 'none' }}>\n      <div className={styles.postContainer}>\n        <p>\n          ID: <span>{post?.id}</span>{' '}\n        </p>\n        <h1>{post?.title}</h1>\n        <p>{moment(post?.time).format('Do MMM YYYY hh:mm a')}</p>\n        <p>\n          Posted by: <span>{post?.by}</span>{' '}\n        </p>\n      </div>\n    </a>\n  );\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}