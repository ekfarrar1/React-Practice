{"ast":null,"code":"var _jsxFileName = \"/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobFeed() {\n  _s();\n  const [jobPosts, setJobPosts] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [endReached, setEndReached] = useState(false);\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n  //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const fetchIds = async () => {\n    if (!endReached) {\n      try {\n        const response = await axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`);\n        //can't use a setter function for job IDs because it's inside an async function\n        //state functions are updated in batches in React JS, so if you try to set job IDs \n        //with a setter function and access right after it likely won't be updated to current state yet\n\n        // grab 5 job IDs based on page number\n        //.splice overwrites original array\n        //so, response.data returns all job IDs every time and splice takes the next 5 needed until reach the end\n        //const jobPostIds = response.data.splice(pageNumber*5, 5)\n        const jobPostIds = response.data.slice(pageNumber * 5, 5);\n\n        // /* NOTE: I'm confused by this */\n        console.log(jobPosts.length);\n        // console.log(jobPostIds.length)\n\n        if (jobPosts.length >= response.data.length) {\n          // Once endReached is true, no more calls will be made to the API\n          setEndReached(true);\n        }\n\n        //fetch metadata on all job post IDs currently loaded on the page\n        fetchMetadata(jobPostIds);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  // // Fetch metadata for given array of job post IDs (array gets longer each time \"Load More\" is pressed)\n  // const fetchMetadata = async (jobPostIds) => {\n  //   jobPostIds.forEach((jobPostId) => {\n  //     axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n  //     // if successful, set job IDs as response data\n  //     .then(response =>{\n  //       console.log(response)\n  //       // Can use setter function because this isn't an async function\n  //       // '...' = \"Spread Syntax\"\n  //       // response.data contains metadata for job post\n  //       // '(jobPosts) => [...jobPosts, response.data]' appends new response.data to existing jobPosts array\n  //       setJobPosts((jobPosts) => [...jobPosts, response.data])\n  //     })\n  //     // if fails, print error to dev console\n  //     .catch(error => {\n  //       console.log('Error fetching metdata', error)\n  //     })\n  //   })\n  // }\n\n  // // Fetch metadata for given array of job post IDs (array gets longer each time \"Load More\" is pressed)\n  const fetchMetadata = async jobPostIds => {\n    try {\n      const promises = jobPostIds.map(jobPostId => {\n        return axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`);\n      });\n      const responses = await Promise.all(promises);\n      const postDetails = responses.map(response => response.data);\n      setJobPosts(jobPosts => [...jobPosts, ...postDetails]);\n    } catch (error) {\n      console.log('Error fetching metadata', error);\n    }\n  };\n\n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n  //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    fetchIds();\n  }, [pageNumber]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.header,\n      children: \"Hackernews Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allPostsContainer,\n      children:\n      // .map iterates over jobposts\n      // callback function ('onePost, idx') renders each post\n      // 'key={onePost?.id}' --> key is provided so React can identify each component in list\n      // ? is a chaining operator, helps avoid errors if onePost is undefined/null\n      // 'post={onePost}' --> passes onePost as prop to <Post> component so that it can render its properties\n      jobPosts.map((onePost, idx) => /*#__PURE__*/_jsxDEV(Post, {\n        post: onePost\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this),\n    // only display \"Load More\" button if end hasn't been reached\n    !endReached && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(pageNumber + 1),\n        className: styles.button,\n        children: \"Load More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(JobFeed, \"tr7n8M22XNt6W2Mjb19IlrAU8NQ=\");\n_c = JobFeed;\n;\nexport default JobFeed;\n\n// Job Post Object\nconst Post = ({\n  post\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: post === null || post === void 0 ? void 0 : post.url,\n    target: \"__blank\",\n    style: {\n      textDecoration: 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post === null || post === void 0 ? void 0 : post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: moment(post === null || post === void 0 ? void 0 : post.time).format('Do MMM YYYY hh:mm a')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted by: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.by\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 22\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n_c2 = Post;\nvar _c, _c2;\n$RefreshReg$(_c, \"JobFeed\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","styles","axios","moment","jsxDEV","_jsxDEV","JobFeed","_s","jobPosts","setJobPosts","pageNumber","setPageNumber","endReached","setEndReached","fetchIds","response","get","jobPostIds","data","slice","console","log","length","fetchMetadata","error","promises","map","jobPostId","responses","Promise","all","postDetails","className","container","children","header","fileName","_jsxFileName","lineNumber","columnNumber","allPostsContainer","onePost","idx","Post","post","style","display","justifyContent","onClick","button","_c","href","url","target","textDecoration","postContainer","id","title","time","format","by","_c2","$RefreshReg$"],"sources":["/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\n\n\nfunction JobFeed() {\n  const [jobPosts, setJobPosts] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0)\n  const [endReached, setEndReached] = useState(false);\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n   //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const fetchIds = async() => {\n    if (!endReached){\n      try{\n        const response = await axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n        //can't use a setter function for job IDs because it's inside an async function\n          //state functions are updated in batches in React JS, so if you try to set job IDs \n          //with a setter function and access right after it likely won't be updated to current state yet\n        \n        // grab 5 job IDs based on page number\n          //.splice overwrites original array\n          //so, response.data returns all job IDs every time and splice takes the next 5 needed until reach the end\n        //const jobPostIds = response.data.splice(pageNumber*5, 5)\n        const jobPostIds = response.data.slice(pageNumber*5, 5)\n        \n        // /* NOTE: I'm confused by this */\n        console.log(jobPosts.length)\n        // console.log(jobPostIds.length)\n\n        if (jobPosts.length >= response.data.length){\n          // Once endReached is true, no more calls will be made to the API\n          setEndReached(true)\n        }\n\n        //fetch metadata on all job post IDs currently loaded on the page\n        fetchMetadata(jobPostIds)\n      } catch(error){\n        console.log(error)\n      }\n    }\n  };\n    \n    // // Fetch metadata for given array of job post IDs (array gets longer each time \"Load More\" is pressed)\n    // const fetchMetadata = async (jobPostIds) => {\n    //   jobPostIds.forEach((jobPostId) => {\n    //     axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n    //     // if successful, set job IDs as response data\n    //     .then(response =>{\n    //       console.log(response)\n    //       // Can use setter function because this isn't an async function\n    //       // '...' = \"Spread Syntax\"\n    //       // response.data contains metadata for job post\n    //       // '(jobPosts) => [...jobPosts, response.data]' appends new response.data to existing jobPosts array\n    //       setJobPosts((jobPosts) => [...jobPosts, response.data])\n    //     })\n    //     // if fails, print error to dev console\n    //     .catch(error => {\n    //       console.log('Error fetching metdata', error)\n    //     })\n    //   })\n    // }\n\n        // // Fetch metadata for given array of job post IDs (array gets longer each time \"Load More\" is pressed)\n    const fetchMetadata = async (jobPostIds) => {\n      try{\n        const promises = jobPostIds.map((jobPostId) => {\n          return axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n        });\n        const responses = await Promise.all(promises)\n        const postDetails = responses.map((response) => response.data)\n        setJobPosts((jobPosts) => [...jobPosts, ...postDetails])\n      } catch (error) {\n        console.log('Error fetching metadata', error);\n      }\n    }\n  \n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n    //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    fetchIds()}, [pageNumber]);\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.header}>Hackernews Jobs</h1>\n        <div className={styles.allPostsContainer}> \n        {\n          // .map iterates over jobposts\n          // callback function ('onePost, idx') renders each post\n            // 'key={onePost?.id}' --> key is provided so React can identify each component in list\n              // ? is a chaining operator, helps avoid errors if onePost is undefined/null\n            // 'post={onePost}' --> passes onePost as prop to <Post> component so that it can render its properties\n          jobPosts.map((onePost, idx) => (\n            <Post key={ idx } post={ onePost } />\n        ))}\n        </div>\n        {\n          // only display \"Load More\" button if end hasn't been reached\n          !endReached && (\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <button\n              onClick={() => setPageNumber(pageNumber + 1)}\n              className={styles.button}>\n              Load More\n            </button>\n          </div>\n      )}\n    </div>\n  );\n};\n\nexport default JobFeed;\n\n\n// Job Post Object\nconst Post = ({ post }) => {\n  return (\n    <a href={post?.url} target=\"__blank\" style={{ textDecoration: 'none' }}>\n      <div className={styles.postContainer}>\n        <p>\n          ID: <span>{post?.id}</span>{' '}\n        </p>\n        <h1>{post?.title}</h1>\n        <p>{moment(post?.time).format('Do MMM YYYY hh:mm a')}</p>\n        <p>\n          Posted by: <span>{post?.by}</span>{' '}\n        </p>\n      </div>\n    </a>\n  );\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}