{"ast":null,"code":"var _jsxFileName = \"/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js\",\n  _s = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Page({\n  allIds\n}) {\n  _s();\n  const [pageNumber, setPageNumber] = useState(0);\n  if (pageNumber === 13) {\n    setPageNumber(0);\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    value: pageNumber,\n    onClick: e => {\n      setPageNumber(pageNumber + 1);\n    },\n    children: [\" Page Number: \", pageNumber, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(Page, \"CR1SblK9/aPuhw0RURn2I9CvT1Q=\");\n_c = Page;\nfunction JobFeed() {\n  _s4();\n  var _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  const [posts, setPosts] = useState([]);\n  const [perPage, setPerPage] = useState(5);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n  //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async () => {\n    _s2();\n    if (pageNumber !== 13) {\n      // useEffect \n      //pulls data from API using .get function, can see data or error in console (dev tools)\n      //if get is successful, IDs is set to response.data (the IDs)\n      //runs whenever pageNumber updates\n      useEffect(() => {\n        axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n        // if successful, set job IDs as response data\n        .then(response => {\n          console.log(response);\n          setJobIds(response.data);\n        }).catch(error => {\n          console.log(error);\n        });\n      }, [pageNumber]);\n    }\n  };\n  _s2(FetchIds, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const FetchPosts = postIds => {\n    _s3();\n    const [posts, setPosts] = useState('');\n    postIds.forEach(postId => {\n      axios.get(`https://hacker-news.firebaseio.com/v0/item/${postId}.json`).then(response => {\n        console.log(response);\n        setPosts(posts => [...posts, response.data]);\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n  };\n\n  //get all job IDS, put in array\n\n  //get metadata for all job IDs, put in array\n\n  //add button to choose page\n\n  //display 5 posts per page\n  //select page \n  //iterate through index+(5*page num) plus 5\n  _s3(FetchPosts, \"BjGofxs1ffI1Mtiy8OeETrmCnwM=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.header,\n      children: \"Hackernews Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: {\n        fontWeight: '200',\n        textAlign: 'left'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s4(JobFeed, \"vbZtVEaapJNUouQq4vfOKyNN9qM=\");\n_c2 = JobFeed;\n;\nexport default JobFeed;\n\n// Job Post Object\nconst Post = ({\n  post\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: post === null || post === void 0 ? void 0 : post.url,\n    target: \"__blank\",\n    style: {\n      textDecoration: 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post === null || post === void 0 ? void 0 : post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: moment(post === null || post === void 0 ? void 0 : post.time).format('Do MMM YYYY hh:mm a')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted by: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.by\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 22\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n_c3 = Post;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Page\");\n$RefreshReg$(_c2, \"JobFeed\");\n$RefreshReg$(_c3, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","styles","axios","moment","jsxDEV","_jsxDEV","Page","allIds","_s","pageNumber","setPageNumber","value","onClick","e","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","JobFeed","_s4","_s2","$RefreshSig$","_s3","posts","setPosts","perPage","setPerPage","jobIds","setJobIds","FetchIds","get","then","response","console","log","data","catch","error","FetchPosts","postIds","forEach","postId","className","container","header","style","fontWeight","textAlign","_c2","Post","post","href","url","target","textDecoration","postContainer","id","title","time","format","by","_c3","$RefreshReg$"],"sources":["/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\n\n\n\nfunction Page({ allIds }) {\n  const [pageNumber, setPageNumber] = useState(0);\n  if (pageNumber === 13){\n    setPageNumber(0)\n  }\n  return (\n    <button value={pageNumber} onClick={e => {\n      setPageNumber(pageNumber+1);\n    }}> Page Number: {pageNumber} </button>\n  )\n}\n\nfunction JobFeed() {\n  const [posts, setPosts] = useState([]);\n  const [perPage, setPerPage] = useState(5);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0)\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n   //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async() => {\n    if (pageNumber !== 13){\n      // useEffect \n      //pulls data from API using .get function, can see data or error in console (dev tools)\n      //if get is successful, IDs is set to response.data (the IDs)\n      //runs whenever pageNumber updates\n      useEffect(() => {\n        axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n          // if successful, set job IDs as response data\n          .then(response =>{\n            console.log(response)\n            setJobIds(response.data)\n          })\n          .catch(error => {\n            console.log(error)\n          })\n      }, [pageNumber])\n    }\n  }\n\n\n  const FetchPosts = (postIds) => {\n    const [posts, setPosts] = useState('')\n  \n    postIds.forEach((postId) => {\n      axios.get(`https://hacker-news.firebaseio.com/v0/item/${postId}.json`)\n        .then(response =>{\n          console.log(response)\n          setPosts((posts) => [...posts, response.data])\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    })\n  }\n  \n  //get all job IDS, put in array\n\n  //get metadata for all job IDs, put in array\n\n  //add button to choose page\n\n  //display 5 posts per page\n    //select page \n    //iterate through index+(5*page num) plus 5\n  \n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.header}>Hackernews Jobs</h1>\n      {<Page/>}\n      <ol style={{ fontWeight: '200', textAlign: 'left' }}>\n\n      </ol>\n    </div>\n  );\n};\n\nexport default JobFeed;\n\n\n// Job Post Object\nconst Post = ({ post }) => {\n  return (\n    <a href={post?.url} target=\"__blank\" style={{ textDecoration: 'none' }}>\n      <div className={styles.postContainer}>\n        <p>\n          ID: <span>{post?.id}</span>{' '}\n        </p>\n        <h1>{post?.title}</h1>\n        <p>{moment(post?.time).format('Do MMM YYYY hh:mm a')}</p>\n        <p>\n          Posted by: <span>{post?.by}</span>{' '}\n        </p>\n      </div>\n    </a>\n  );\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}