{"ast":null,"code":"var _jsxFileName = \"/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobFeed() {\n  _s();\n  const [jobPosts, setJobPosts] = useState([]);\n  const [perPage, setPerPage] = useState(5);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [endReached, setEndReached] = useState(false);\n\n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n  //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    FetchIds();\n  }, [pageNumber]);\n\n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n  //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async () => {\n    if (pageNumber !== 13) {}\n    axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n    // if successful, set job IDs as response data\n    .then(response => {\n      console.log(response);\n      setJobIds(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n\n    // grab 5 job IDs based on page number\n    jobIds.splice(pageNumber * 5, 5);\n\n    //if number of posts is longer than \n    if (jobPosts.length >= jobIds.length) {\n      setEndReached(true);\n    }\n    fetchMetadata(jobIds);\n  };\n  const fetchMetadata = jobPostIds => {\n    jobPostIds.foreach(jobPostId => {\n      axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n      // if successful, set job IDs as response data\n      .then(response => {\n        console.log(response);\n        setJobIds(response.data);\n      })\n      // if fails, print error to dev console\n      .catch(error => {\n        console.log('Error fetching metdata', error);\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.header,\n      children: \"Hackernews Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: {\n        fontWeight: '200',\n        textAlign: 'left'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(JobFeed, \"LU5cFnFl8v+SRVwfR6IaI4Mf89I=\");\n_c = JobFeed;\n;\nexport default JobFeed;\n\n// Job Post Object\nconst Post = ({\n  post\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: post === null || post === void 0 ? void 0 : post.url,\n    target: \"__blank\",\n    style: {\n      textDecoration: 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post === null || post === void 0 ? void 0 : post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: moment(post === null || post === void 0 ? void 0 : post.time).format('Do MMM YYYY hh:mm a')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted by: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: post === null || post === void 0 ? void 0 : post.by\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n_c2 = Post;\nvar _c, _c2;\n$RefreshReg$(_c, \"JobFeed\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","styles","axios","moment","jsxDEV","_jsxDEV","JobFeed","_s","jobPosts","setJobPosts","perPage","setPerPage","jobIds","setJobIds","pageNumber","setPageNumber","endReached","setEndReached","FetchIds","get","then","response","console","log","data","catch","error","splice","length","fetchMetadata","jobPostIds","foreach","jobPostId","className","container","children","header","fileName","_jsxFileName","lineNumber","columnNumber","Page","style","fontWeight","textAlign","_c","Post","post","href","url","target","textDecoration","postContainer","id","title","time","format","by","_c2","$RefreshReg$"],"sources":["/Users/emmafarrar/Desktop/React-Practice/React-Practice/job-feed-challenge/src/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './CSS_modules/JobFeed.module.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// GET API = `https://hacker-news.firebaseio.com/v0/jobstories.json`;\n// Metadata GET API = https://hacker-news.firebaseio.com/v0/item/YOUR_POST_ID_HERE.json`\n\n\nfunction JobFeed() {\n  const [jobPosts, setJobPosts] = useState([]);\n  const [perPage, setPerPage] = useState(5);\n  const [jobIds, setJobIds] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [endReached, setEndReached] = useState(false);\n\n  // useEffect \n  //pulls data from API using .get function, can see data or error in console (dev tools)\n  //if get is successful, IDs is set to response.data (the IDs)\n  //runs whenever pageNumber updates\n    //**this is not inside of FetchIds because you can't call useEffect conditionally */\n  useEffect(() => {\n    FetchIds()}, [pageNumber]);\n  \n  //asynchronous function: used to handle functions that may take some time (common for API calls)\n   //let app run smoothly w/o getting blocked while waiting for these operations to finish\n  const FetchIds = async() => {\n    if (pageNumber !== 13){}\n\n      axios.get(`https://hacker-news.firebaseio.com/v0/jobstories.json`)\n        // if successful, set job IDs as response data\n        .then(response =>{\n          console.log(response)\n          setJobIds(response.data)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n      \n      // grab 5 job IDs based on page number\n      jobIds.splice(pageNumber*5, 5);\n      \n      //if number of posts is longer than \n      if (jobPosts.length >= jobIds.length){\n        setEndReached(true)\n      }\n      fetchMetadata(jobIds)\n    }\n\n    const fetchMetadata = (jobPostIds) => {\n      jobPostIds.foreach((jobPostId) => {\n        axios.get(`https://hacker-news.firebaseio.com/v0/item/${jobPostId}.json`)\n        // if successful, set job IDs as response data\n        .then(response =>{\n          console.log(response)\n          setJobIds(response.data)\n        })\n        // if fails, print error to dev console\n        .catch(error => {\n          console.log('Error fetching metdata', error)\n        })\n      })\n    }\n  \n  \n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.header}>Hackernews Jobs</h1>\n      {<Page/>}\n      <ol style={{ fontWeight: '200', textAlign: 'left' }}>\n\n      </ol>\n    </div>\n  );\n};\n\nexport default JobFeed;\n\n\n// Job Post Object\nconst Post = ({ post }) => {\n  return (\n    <a href={post?.url} target=\"__blank\" style={{ textDecoration: 'none' }}>\n      <div className={styles.postContainer}>\n        <p>\n          ID: <span>{post?.id}</span>{' '}\n        </p>\n        <h1>{post?.title}</h1>\n        <p>{moment(post?.time).format('Do MMM YYYY hh:mm a')}</p>\n        <p>\n          Posted by: <span>{post?.by}</span>{' '}\n        </p>\n      </div>\n    </a>\n  );\n};\n\n// {\n//   FetchIds().map(((id) => <li>{id}</li>))\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}